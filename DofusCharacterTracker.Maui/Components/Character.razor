@using DofusCharacterTracker.Maui.Pages
@using DofusCharacterTracker.Maui.Database.Tables
@using DofusCharacterTracker.Maui.Model
@using Microsoft.EntityFrameworkCore
@using DofusCharacterTracker.Maui.Database

<div>
    <div class="header">
        <h4>@Value.Name</h4>
        <div>@Value.Elements</div>
        <div>@Value.Class</div>
        <div>@Value.Level</div>
        <a href="/edit-character/@Value.Id/core"><i class="fa-solid fa-pencil"></i></a>
    </div>
    <div class="details">
        <ul>
            @if(Value.LockedRegions.Count > 0)
            {
                @foreach(var locked in Value.LockedRegions.OrderBy(r => r))
                {
                    <li>
                        <i class="fa-solid fa-lock" style="color:goldenrod"></i> @locked.GetDescription()
                        @(' ')<button class="as-text" type="button" @onclick="() => DoUnlockRegion(locked)"><i class="fa-solid fa-check"></i></button>
                    </li>
                }
            }
            <li>
                <i class="fa-regular fa-calendar-days" style="color:steelblue"></i>
                @Value.AlmanaxProgress.GetDescription()
                <a href="/edit-character/@Value.Id/almanax-progress"><i class="fa-solid fa-pencil"></i></a>
            </li>
            @if(Value.NeededDungeons.Count > 0)
            {
                @foreach(var dungeon in Value.NeededDungeons.OrderBy(d => d.Dungeon))
                {
                    <li>
                        <i class="fa-solid fa-skull" style="color:#555" />
                        @dungeon.Dungeon
                        @if (!string.IsNullOrWhiteSpace(dungeon.Notes))
                        {
                            <text> &mdash; @dungeon.Notes</text>
                        }
                        @(' ')<a href="/update-dungeon-notes/@dungeon.Id"><i class="fa-solid fa-pencil"></i></a>
                        <a href="/complete-dungeon/@dungeon.Id"><i class="fa-solid fa-check"></i></a>
                    </li>
                }
            }
        </ul>
        <div style="margin-left:2.25rem;">
            <a href="/edit-character/@Value.Id/add-dungeon"><i class="fa-solid fa-plus" /> Add Dungeon</a>
        </div>
    </div>
</div>

@code {
    [Inject] private IDbContextFactory<Db> DbFactory { get; set; } = null!;
    [Inject] private NavigationManager Navigator { get; set; } = null!;

    [Parameter, EditorRequired] public required CharacterModel Value { get; set; }
    [Parameter] public EventCallback<CharacterModel> ValueChanged { get; set; }

    public async Task DoUnlockRegion(UnlockableRegion region)
    {
        await using var db = await DbFactory.CreateDbContextAsync();

        var character = await db.Characters.FirstOrDefaultAsync(c => c.Id == Value.Id);

        if(character == null)
        {
            Navigator.NavigateTo("/");
            return;
        }

        switch(region)
        {
            case UnlockableRegion.Frigost:
                character.UnlockedFrigost = true;
                break;

            case UnlockableRegion.MoonIsland:
                character.UnlockedMoonIsland = true;
                break;

            case UnlockableRegion.Ohwymi:
                character.UnlockedOhwymi = true;
                break;

            case UnlockableRegion.Pandala:
                character.UnlockedPandala = true;
                break;

            case UnlockableRegion.WabbitIsland:
                character.UnlockedWabbitIsland = true;
                break;

            case UnlockableRegion.OtomaiIsland:
                character.UnlockedOtomaiIsland = true;
                break;

            case UnlockableRegion.OtomaiBridgeOfDeath:
                character.UnlockedOtomaiBridgeOfDeath = true;
                break;
        }

        await db.SaveChangesAsync();

        await ValueChanged.InvokeAsync(Value with {
            LockedRegions = Value.LockedRegions.Where(r => r != region).ToList()
        });
    }
}
